from enum import Enum

from langchain_core.runnables.base import RunnableLike

from ..data import load_questions, prepare_retriever, load_raft_dataset
from ..features.dataset_generator import (
    prepare_invoker as prepare_dataset_builder_invoker,
    invoke as invoke_dataset_builder,
    validate_dataset as validate_dataset_builder,
    save as save_dataset_builder,
)
from ..features.trainer import prepare_train, train
from ..llm import (
    load_model,
    load_embedding_model,
    prepare_for_inference,
    inference,
    retrieve_input,
    validate_input,
)
from ..utils.runmode_check import check_runmode


class Nodes(Enum):
    """
    Nodes in the state graph.\n
    Their identifiers are defined with prefix for each node type.\n
    - `c` for conditional nodes
    - `ui` for human(user) interface nodes
    - `ds` for dataset nodes
    - `lm` for language model nodes
    - `rt` for retriever nodes
    """

    EMBEDDING_MODEL_LOADER = "lm_loader_embedding_model"
    """Embedding model loader node"""
    RETRIEVER_PREPARER = "rt_preparer_retriever"
    """VectorDB retriever preparation node"""
    RUNMODE_CHECKER = "c_check_runmode"
    """Run mode checker conditional node"""

    # RAFT Dataset Builder
    RF_MODEL_LOADER = "lm_loader_model"
    """LLM model loader node"""
    RF_QUESTIONS_LOADER = "ds_loader_questions"
    """Questions dataset loader node"""
    RF_INVOKER_CHAIN_BUILDER = "lm_builder_invoker_chain"
    """
    Langchain invoker builder node

    Create an `Iterator` which inference the language model with the questions using langchain.
    """
    RF_QA_INVOKER = "lm_invoker_qa"
    """
    Question answering language model inference node

    Actually invokes iteration of chains to generate responses for prompts and save them as a dataset.
    """
    RF_ANSWER_VALIDATOR = "c_validator_answer"
    """
    Answer validation node

    Validate the answers generated by the language model using Ragas framework.
    """
    RF_QA_DATASET_CHECKPOINTER = "ds_checkpoint_qa"
    """
    Question answering dataset checkpointing node

    Finally save the dataset generated by the language model.
    """

    # Question Answering
    INFERENCE_PREPARER = "lm_preparer_inference"
    """Inference preparation language model node"""
    INPUT_RETRIEVER = "ui_input_retriever"
    """Input retriever conditional node"""
    INPUT_VALIDATOR = "c_input_validator"
    """Input validation conditional node"""
    RESULT_INFERENCER = "lm_inferencer_result"
    """Result inference language model inference node"""

    # Trainer
    TR_MODEL_LOADER = "lm_loader_model_trainer"
    """Trainer model loader node"""
    TR_DATASET_LOADER = "ds_loader_raft_dataset"
    """RAFT dataset loader node"""
    TR_INVOKER_BUILDER = "lm_builder_invoker"
    """Trainer invoker builder node"""
    TR_MODEL_TRAINER = "lm_trainer_model"
    """Model training node"""

    @property
    def is_conditional(self) -> bool:
        """
        Check if the node is conditional.\n
        :return: True if the node is conditional, False otherwise
        """
        return self.key.split("_")[0] == "c"

    @property
    def key(self) -> str:
        """
        Get the key of the node.\n
        :return: key of the node
        """
        return self.value

    @property
    def runnable(self) -> RunnableLike:
        """
        Get the runnable for the node.\n
        :return: Runnable for the node
        """
        if self is Nodes.EMBEDDING_MODEL_LOADER:
            return load_embedding_model
        elif self is Nodes.RETRIEVER_PREPARER:
            return prepare_retriever
        elif self is Nodes.RUNMODE_CHECKER:
            return check_runmode

        # RAFT Dataset Builder
        elif self is Nodes.RF_MODEL_LOADER:
            return load_model
        elif self is Nodes.RF_QUESTIONS_LOADER:
            return load_questions
        elif self is Nodes.RF_INVOKER_CHAIN_BUILDER:
            return prepare_dataset_builder_invoker
        elif self is Nodes.RF_QA_INVOKER:
            return invoke_dataset_builder
        elif self is Nodes.RF_ANSWER_VALIDATOR:
            return validate_dataset_builder
        elif self is Nodes.RF_QA_DATASET_CHECKPOINTER:
            return save_dataset_builder

        # Question Answering
        elif self is Nodes.INFERENCE_PREPARER:
            return prepare_for_inference
        elif self is Nodes.INPUT_RETRIEVER:
            return retrieve_input
        elif self is Nodes.INPUT_VALIDATOR:
            return validate_input
        elif self is Nodes.RESULT_INFERENCER:
            return inference

        # Trainer
        elif self is Nodes.TR_MODEL_LOADER:
            return load_model
        elif self is Nodes.TR_DATASET_LOADER:
            return load_raft_dataset
        elif self is Nodes.TR_INVOKER_BUILDER:
            return prepare_train
        elif self is Nodes.TR_MODEL_TRAINER:
            return train

        # Fallback
        else:
            raise ValueError(f"Runnable for node {self} is not defined.")

    @property
    def node_action_binding(self) -> tuple[str, RunnableLike]:
        """
        Get the id and runnable for the node.\n
        :return: Tuple of id and runnable for the node
        """
        return self.key, self.runnable
