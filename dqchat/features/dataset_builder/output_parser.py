import orjson
import re

from langchain.pydantic_v1 import BaseModel, Field
from langchain.schema import BaseOutputParser

from ...utils.type_helper import guard_type


class QAResponse(BaseModel):
    """
    Scheme of dataset which answer and reason is generated by inferencing language model.
    """

    id: str = Field(alias="qa_id")
    """
    Unique id of response itself.
    
    e.g. qa001
    """
    dataset_id: str
    """
    Unique id of dataset which this data will be a part of it.
    
    e.g. ds001
    """
    question: str
    """
    Question from user.
    
    e.g. What screenwriter with credits for “Evolution”[0/1879]e a film starring Nicolas Cage and Téa Leoni?
    """
    context: str
    """
    Documents where helpful knowledge base can be found. Usually obtained by searching vector store.
    
    e.g. . . . David Weissman is a screenwriter and director. His film credits include “The Family Man” (2000),
    “Evolution” (2001), and “When in Rome” (2010).
    . . .
    The Family Man is a 2000 American romantic comedy-drama film directed by Brett Ratner, written by David Diamond
    and David Weissman, and starring Nicolas Cage and Téa Leoni. . . .
    """
    reason: str
    """
    Chain of Thought prompting method. Explain how the answer is obtained by introducing knowledge base.
    
    e.g. The screenwriter with credits for the film “Evolution,” starring Nicolas Cage and Téa Leoni, is David Weissman.
    This information is provided in the reference documents which mention David Weissman as a screenwriter
    with film credits including “The Family Man” (2000), “Evolution” (2001), and “When in Rome” (2010).
    Therefore, the screenwriter for “Evolution” is David Weissman. 
    """
    answer: str
    """
    Actual answer generated from language model.
    
    e.g. David Weissman 
    """


class RAFTResponseParser(BaseOutputParser):
    @staticmethod
    def __split_sections(text: str) -> list[str]:
        return re.split(r"\n{2,}", text)

    def parse(self, text: str) -> QAResponse:
        splitted_answer = RAFTResponseParser.__split_sections(text)
        json_match = re.search(r"\{.*\}", splitted_answer[-1], re.DOTALL)

        if json_match:
            json_string = json_match.group()

            parsed_dict = orjson.loads(json_string)
            safe_dict = guard_type(parsed_dict, dict)
        else:
            raise ValueError("No JSON object found in the response.")

        safe_dict["qa_id"] = "qa001"
        safe_dict["dataset_id"] = "ds001"

        response = QAResponse.parse_obj(safe_dict)

        return response
