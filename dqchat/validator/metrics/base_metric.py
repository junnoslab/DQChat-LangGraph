from abc import abstractmethod

from datasets import Dataset
from transformers import PreTrainedModel

from .test_case import LLMTestCase


class BaseMetric:
    threshold: float

    def __init__(self, threshold: float):
        self.threshold = threshold

    @abstractmethod
    def measure(self, test_case: LLMTestCase) -> float:
        """
        Measure the metric for the given test case.

        Args:
            test_case (LLMTestCase): The test case to measure the metric for.

        Returns:
            float: The metric result score.
        """
        raise NotImplementedError

    @abstractmethod
    def evaluate(self, dataset: Dataset, llm: PreTrainedModel) -> Dataset:
        """
        Evaluate the metric for the given dataset.

        Args:
            dataset (Dataset): The dataset to evaluate the metric for.
            llm (PreTrainedModel): The pre-trained model to use for evaluation.

        Returns:
            Dataset: The dataset with the metric result score.
                     Column name is automatically generated by the name of the metric.
        """
        raise NotImplementedError
