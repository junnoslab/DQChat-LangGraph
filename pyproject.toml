[project]
name = "DQChat-langGraph"
version = "0.1.0"
description = "Add a short description here"
authors = [{name = "Junnos ", email = "junnos.dev@gmail.com"}]
requires-python = ">= 3.10, < 3.11"
dependencies = [ "torch>=2.4.0,<3", "langchain-core>=0.2.30,<0.3", "langgraph>=0.2.3,<0.3", "chromadb>=0.5.5,<0.6", "transformers>=4.44.0,<5", "datasets>=2.20.0,<3", "accelerate>=0.33.0,<0.34", "peft>=0.12.0,<0.13", "trl>=0.9.6,<0.10", "pydantic>=2.8.2,<3", "tqdm>=4.66.5,<5", "bitsandbytes>=0.42.0,<0.44", "wandb>=0.17.6,<0.18", "pillow>=10.4.0,<11", "sentence-transformers>=3.0.1,<4", "orjson>=3.10.7,<4", "langchain>=0.2.13,<0.3", "vllm>=0.5.4,<0.6"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["dqchat", "trainer"]

[tool.pixi.project]
channels = ["pytorch", "nvidia", "conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
DQChat-langGraph = { path = ".", editable = true }

[tool.pixi.system-requirements]
linux = "5.15.0"

[tool.pixi.tasks]
run = "python -m dqchat"
r = { depends-on = ["run"] }
trainer = "python -m trainer"
t = { depends-on = ["trainer"] }

[tool.pixi.dependencies]
setuptools = ">=72.1.0,<73"
pre-commit = ">=3.7.1,<4"

[tool.pixi.target.linux-64.dependencies]
pytorch-cuda = "12.1.*"

[tool.pyright]
venvPath = "."
venv = ".pixi/envs/default"

[tool.bumpversion]
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = "--no-verify"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
